#!/bin/bash
set -eu

APPLICATION=app
RAILS_ROOT=$(cd $(dirname $0)/../ && pwd)

function usage() {
  cat <<EOF
Usage: $(basename ${0}) is a tool for docker
  $(basename ${0}) command [args...]

Commands:
  init        初期化する
  build       イメージをビルドする
  clean       コンテナをすべて破棄する
  start       サーバをバックグラウンドで起動する
  stop        サーバを停止する
  status      コンテナの起動状況を見る
  restart     サーバを再起動する
  logs        バックグラウンドで起動しているサーバのログを見る
  up          サーバをフォアグラウンドで起動する
  exec        appコンテナでコマンドを実行する
EOF
}

function build() {
  docker-compose build
}

function init() {
  docker-compose down --volumes --remove-orphans --rmi all
  docker-compose build
  docker-compose up -d
  docker-compose run --rm $APPLICATION bin/rails db:create db:schema:load
  docker-compose run --rm $APPLICATION bin/rails db:create db:test:prepare RAILS_ENV=test
}

function clean() {
  docker-compose stop
  docker-compose rm --force
  docker-compose down --volumes --remove-orphans --rmi all
}

function remove_server_pid() {
  rm -f $RAILS_ROOT/tmp/pids/server.pid
}

function start() {
  remove_server_pid
  docker-compose up -d
}

function stop() {
  docker-compose stop
}

function logs() {
  docker-compose logs
}

function restart() {
  stop
  remove_server_pid
  start
}

function execute_command() {
  docker-compose exec app $@
  exit $?
}

function status() {
  docker-compose ps
}

function up() {
  remove_server_pid
  docker-compose up $APPLICATION
}

shift `expr $OPTIND - 1`

if [ $# -eq 0 ];then
  usage
  exit 1
fi

case "${1}" in
  "init")
    init
  ;;

  "build")
    build
  ;;

  "clean")
    clean
  ;;

  "start")
    start
  ;;

  "stop")
    stop
  ;;

  "status")
    status
  ;;

  "restart")
    restart
  ;;

  "logs")
    logs
  ;;

  "up")
    up
  ;;

  "exec")
    shift
    execute_command $@
  ;;

  *)
    usage
    exit 1
  ;;
esac
